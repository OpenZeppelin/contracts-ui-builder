// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Export Snapshot Tests > Conditional File Modifications > should modify styles.css import correctly based on isCliBuildTarget option > styles-css-cli 1`] = `
"@import 'tailwindcss' source('../../../');
@import './styles/global.css';

/* Base styles... */"
`;

exports[`Export Snapshot Tests > Conditional File Modifications > should modify styles.css import correctly based on isCliBuildTarget option > styles-css-ui 1`] = `
"@import 'tailwindcss';
@import './styles/global.css';

/* Base styles... */"
`;

exports[`Export Snapshot Tests > EVM Export Snapshots > should match snapshot for App component > app-component-evm 1`] = `
"import {
  useDerivedAccountStatus,
  useWalletState,
  WalletConnectionWithSettings,
} from '@openzeppelin/contracts-ui-builder-react-core';
import { Footer } from '@openzeppelin/contracts-ui-builder-ui';

import GeneratedForm from './components/GeneratedForm';

/**
 * App Component
 *
 * Main application component that wraps the form.
 * Uses useWalletState to get the active adapter.
 */
export function App() {
  const { activeAdapter, isAdapterLoading } = useWalletState();
  const { isConnected: isWalletConnectedForForm } = useDerivedAccountStatus();

  if (isAdapterLoading) {
    return <div className="app-loading">Loading adapter...</div>;
  }
  if (!activeAdapter) {
    return (
      <div className="app-error">
        Adapter not available. Please ensure network is selected and supported.
      </div>
    );
  }

  return (
    <div className="app">
      <header className="header border-b px-6 py-3">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center gap-4">
            <img src="/OZ-Logo-BlackBG.svg" alt="OpenZeppelin Logo" className="h-6 w-auto" />
            <div className="h-5 border-l border-gray-300 mx-1"></div>
            <div>
              <h1 className="text-base font-medium">transfer</h1>
              <p className="text-xs text-muted-foreground">
                Form for interacting with blockchain contracts
              </p>
            </div>
          </div>
          <WalletConnectionWithSettings />
        </div>
      </header>

      <main className="main">
        <div className="container">
          <GeneratedForm adapter={activeAdapter} isWalletConnected={isWalletConnectedForForm} />
        </div>
      </main>

      <Footer />
    </div>
  );
}
"
`;

exports[`Export Snapshot Tests > EVM Export Snapshots > should match snapshot for EVM adapter > evm-adapter 1`] = `""`;

exports[`Export Snapshot Tests > EVM Export Snapshots > should match snapshot for Form component > form-component-evm 1`] = `
"import { useState } from 'react';

import {
  ContractActionBar,
  ContractStateWidget,
  TransactionForm,
} from '@openzeppelin/contracts-ui-builder-renderer';
import type {
  ContractAdapter,
  ContractSchema,
  ExecutionConfig,
  RenderFormSchema,
} from '@openzeppelin/contracts-ui-builder-types';
import { Card, CardContent } from '@openzeppelin/contracts-ui-builder-ui';

// Props for GeneratedForm
interface GeneratedFormProps {
  adapter: ContractAdapter;
  isWalletConnected?: boolean;
}

/**
 * Generated Transaction Form for transfer
 *
 * This component renders a form for interacting with a blockchain contract.
 * It uses the shared renderer package which ensures consistent behavior
 * with the preview in the builder app.
 */
export default function GeneratedForm({ adapter, isWalletConnected }: GeneratedFormProps) {
  // TODO: Enable this useEffect as a fallback?
  // If the adapter supports runtime schema loading (e.g., via Etherscan)
  // and the injected schema is missing or invalid, this could attempt to load it.
  /*
  const [contractSchema, setContractSchema] = useState<ContractSchema | null>(null);
  */
  const [isWidgetVisible, setIsWidgetVisible] = useState(false);
  const [loadError, _setLoadError] = useState<Error | null>(null);
  // Form schema generated from the builder and transformed by FormSchemaFactory
  const formSchema: RenderFormSchema = {
    functionId: 'transfer',
    layout: {
      columns: 1,
      spacing: 'normal',
      labelPosition: 'top',
    },
    validation: {
      mode: 'onChange',
      showErrors: 'inline',
    },
    theme: {},
    contractAddress: '0xe34139463bA50bD61336E0c446Bd8C0867c6fE65',
    id: 'form-transfer',
    title: 'Transfer',
    description: 'Form for interacting with the Transfer function.',
    fields: [
      {
        id: '[id]',
        name: 'testParam',
        label: 'Test Parameter',
        type: 'text',
        placeholder: 'Enter test parameter',
        helperText: 'Description for Test Parameter',
        validation: {
          required: true,
        },
      },
    ],
    submitButton: {
      text: 'Execute Transfer',
      loadingText: 'Processing...',
      variant: 'primary',
    },
  }; /*@@FORM_SCHEMA_JSON@@*/

  // Contract schema injected by generator (loaded or imported by the user)
  const contractSchema: ContractSchema = {
    ecosystem: 'evm',
    name: 'MockContract',
    address: '0x1234567890123456789012345678901234567890',
    functions: [
      {
        id: 'transfer',
        name: 'transfer',
        displayName: 'Transfer',
        inputs: [],
        type: 'function',
        modifiesState: true,
      },
      {
        id: 'viewFunction',
        name: 'viewFunction',
        displayName: 'View Function',
        inputs: [],
        type: 'function',
        modifiesState: false,
        stateMutability: 'view',
      },
    ],
  };

  // Execution configuration selected in the builder
  const executionConfig: ExecutionConfig | undefined = {
    method: 'eoa',
    allowAny: true,
  };

  const contractAddress = formSchema.contractAddress;

  // TODO: Enable this useEffect as a fallback?
  // If the adapter supports runtime schema loading (e.g., via Etherscan)
  // and the injected schema is missing or invalid, this could attempt to load it.
  /*
  useEffect(() => {
    setLoadError(null);
    setContractSchema(null);

    if (contractAddress) {
      adapter
        .loadContract(contractAddress)
        .then(setContractSchema)
        .catch((err: unknown) => {
          // Catch error during contract loading
          logger.error('GeneratedForm', 'Error loading contract schema:', err);
          // Create a new Error object if caught value is not already one
          const errorToSet =
            err instanceof Error ? err : new Error('Failed to load contract state');
          setLoadError(errorToSet);
          setContractSchema(null);
        });
    } else {
      setContractSchema(null);
    }
  }, [contractAddress, adapter]);
  */

  // Decide which schema to use: prioritize injected, fallback maybe later?
  const schemaToUse = contractSchema; // Sticking to injected schema for now

  const toggleWidget = () => {
    setIsWidgetVisible((prev: boolean) => !prev);
  };

  return (
    <div className="space-y-6">
      {/* Contract Action Bar - consistent with builder app */}
      {adapter.networkConfig && (
        <ContractActionBar
          networkConfig={adapter.networkConfig}
          contractAddress={contractAddress}
          onToggleContractState={toggleWidget}
          isWidgetExpanded={isWidgetVisible}
        />
      )}

      <div className="flex gap-4">
        {/* Contract State Widget on the left side - matching builder app layout */}
        {contractAddress && isWidgetVisible && (
          <div className="w-[300px] flex-shrink-0">
            <div className="sticky top-4">
              <ContractStateWidget
                contractSchema={schemaToUse}
                contractAddress={contractAddress}
                adapter={adapter}
                isVisible={isWidgetVisible}
                onToggle={toggleWidget}
                error={loadError}
              />
            </div>
          </div>
        )}

        {/* Main form on the right side */}
        <div className="flex-1">
          <Card>
            <CardContent className="space-y-4">
              <TransactionForm
                schema={formSchema}
                contractSchema={contractSchema}
                adapter={adapter}
                isWalletConnected={isWalletConnected}
                executionConfig={executionConfig}
              />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
"
`;

exports[`Export Snapshot Tests > EVM Export Snapshots > should match snapshot for adapters index > adapter-index-evm 1`] = `""`;

exports[`Export Snapshot Tests > EVM Export Snapshots > should match snapshot for package.json structure > package-json-evm 1`] = `
{
  "dependencies": {
    "@openzeppelin/contracts-ui-builder-adapter-evm": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-react-core": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-renderer": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-types": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-ui": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-utils": "^0.8.0",
    "@tanstack/react-query": "^5.0.0",
    "@wagmi/core": "^2.20.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.60.0",
    "viem": "^2.28.0",
    "wagmi": "^2.15.0",
  },
  "devDependencies": {
    "@tailwindcss/vite": "^4.1.11",
    "@types/lodash": "^4.17.5",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@typescript-eslint/eslint-plugin": "^8.26.0",
    "@typescript-eslint/parser": "^8.26.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.3.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "tailwindcss": "^4.0.0",
    "typescript": "^5.8.2",
    "vite": "^6.2.5",
  },
  "scripts": {
    "build": "tsc && vite build",
    "check-deps": "npm outdated",
    "dev": "vite",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "update-renderer": "npm update @openzeppelin/contracts-ui-builder-renderer",
  },
}
`;

exports[`Export Snapshot Tests > Solana Export Snapshots > should match snapshot for Solana adapter > solana-adapter 1`] = `""`;

exports[`Export Snapshot Tests > Solana Export Snapshots > should match snapshot for adapters index with Solana > adapter-index-solana 1`] = `""`;

exports[`Export Snapshot Tests > Solana Export Snapshots > should match snapshot for package.json with Solana dependencies > package-json-solana 1`] = `
{
  "dependencies": {
    "@openzeppelin/contracts-ui-builder-adapter-evm": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-react-core": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-renderer": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-types": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-ui": "^0.8.0",
    "@openzeppelin/contracts-ui-builder-utils": "^0.8.0",
    "@tanstack/react-query": "^5.0.0",
    "@wagmi/core": "^2.20.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.60.0",
    "viem": "^2.28.0",
    "wagmi": "^2.15.0",
  },
  "devDependencies": {
    "@tailwindcss/vite": "^4.1.11",
    "@types/lodash": "^4.17.5",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@typescript-eslint/eslint-plugin": "^8.26.0",
    "@typescript-eslint/parser": "^8.26.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^9.3.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.5",
    "tailwindcss": "^4.0.0",
    "typescript": "^5.8.2",
    "vite": "^6.2.5",
  },
  "scripts": {
    "build": "tsc && vite build",
    "check-deps": "npm outdated",
    "dev": "vite",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "update-renderer": "npm update @openzeppelin/contracts-ui-builder-renderer",
  },
}
`;
