import { uiBuilderStore } from '../../uiBuilderStore';
import { SavedConfigurationData } from './types';

/**
 * Generates a default title for the configuration based on current state.
 * This is primarily used to preserve "New Contract UI" during early stages.
 * Meaningful titles with contract addresses are generated in FormGenerator.generateFormConfig().
 */
export function generateDefaultTitle(state: ReturnType<typeof uiBuilderStore.getState>): string {
  // If there's already a form config title (generated by FormGenerator), use it
  if (state.formConfig?.title) {
    return state.formConfig.title;
  }

  // Fallback to preserve "New Contract UI" during early stages before form generation
  return 'New Contract UI';
}

/**
 * Builds a complete configuration object for saving.
 */
export function buildConfigurationObject(
  state: ReturnType<typeof uiBuilderStore.getState>,
  title: string
): SavedConfigurationData {
  const formConfig = {
    ...state.formConfig,
    id: state.formConfig?.functionId || 'new',
    title: state.formConfig?.title || 'New Contract UI',
    functionId: state.selectedFunction || '',
    contractAddress: state.contractState.address || '',
    fields: state.formConfig?.fields || [],
    layout: state.formConfig?.layout || {
      columns: 1 as const,
      spacing: 'normal' as const,
      labelPosition: 'top' as const,
    },
    validation: state.formConfig?.validation || {
      mode: 'onChange' as const,
      showErrors: 'inline' as const,
    },
    submitButton: {
      text: 'Submit',
      loadingText: 'Processing...',
      position: 'right' as const,
    },
    theme: state.formConfig?.theme || {},
    description: state.formConfig?.description || '',
  };

  return {
    title,
    ecosystem: state.selectedEcosystem || 'evm',
    networkId: state.selectedNetworkConfigId || '',
    contractAddress: state.contractState.address || '',
    functionId: state.selectedFunction || '',
    formConfig,
    executionConfig: state.formConfig?.executionConfig,
    uiKitConfig: state.formConfig?.uiKitConfig,
  };
}
