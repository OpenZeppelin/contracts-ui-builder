import { Shield, User, Users } from 'lucide-react';
import React from 'react';
import { useController } from 'react-hook-form';

import { EmptyState } from '@openzeppelin/contracts-ui-builder-ui';

import { OptionSelector, SelectableOption } from '../../../Common/OptionSelector';
import { TitledSection } from '../../../Common/TitledSection';
import type { PrimaryMethodSelectorProps } from '../types';
import { EoaConfiguration } from './EoaConfiguration';
import { RelayerConfiguration } from './RelayerConfiguration';

interface ExecutionMethodOption extends SelectableOption {
  value: string;
}

export function PrimaryMethodSelector({
  control,
  adapterAvailable,
  options,
  watchedEoaOption,
  adapter,
  setValue,
  isWidgetExpanded = false,
}: PrimaryMethodSelectorProps): React.ReactElement {
  // Use controller from react-hook-form to manage the selected value
  const { field } = useController({
    name: 'executionMethodType',
    control,
    defaultValue: 'eoa', // Default to EOA
  });

  // Transform options for the selector component
  const selectorOptions: ExecutionMethodOption[] = options.map((option) => ({
    id: option.value,
    label: option.label,
    disabled: option.disabled,
    value: option.value,
  }));

  // Icon mapping for execution methods
  const executionMethodIcons = {
    eoa: <User className="size-4" />,
    relayer: <Shield className="size-4" />,
    multisig: <Users className="size-4" />,
  };

  // Generate configuration content for the selected method
  const configContent = (() => {
    if (!adapterAvailable) return undefined;

    if (field.value === 'eoa') {
      return (
        <EoaConfiguration
          control={control}
          adapter={adapter || null}
          watchedEoaOption={watchedEoaOption}
        />
      );
    }

    if (field.value === 'multisig') {
      return (
        <EmptyState
          icon={<Users className="h-6 w-6 text-muted-foreground" />}
          title="Multisig Configuration Coming Soon"
          description="Multisig (e.g., Safe, Squads) configuration options will be available here in a future update. Stay tuned for enhanced multi-signature wallet support."
          size="small"
        />
      );
    }

    if (field.value === 'relayer') {
      return (
        <RelayerConfiguration control={control} adapter={adapter || null} setValue={setValue} />
      );
    }

    return undefined;
  })();

  return (
    <TitledSection
      title="Transaction Execution"
      description="Select how transactions generated by this form should be executed."
      isAvailable={adapterAvailable}
      unavailableMessage="No blockchain adapter selected."
    >
      <OptionSelector
        options={selectorOptions}
        selectedId={field.value || null}
        onSelect={field.onChange}
        configContent={configContent}
        isCollapsed={isWidgetExpanded}
        iconMap={executionMethodIcons}
      />
    </TitledSection>
  );
}

PrimaryMethodSelector.displayName = 'PrimaryMethodSelector';
