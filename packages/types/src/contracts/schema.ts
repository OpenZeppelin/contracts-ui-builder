import { Ecosystem } from '../common/ecosystem';

/**
 * Represents a parameter within a contract function or event. This is a generalized, internal
 * representation used by the Contracts UI Builder. Blockchain-specific adapters are
 * responsible for mapping their native parameter types (e.g., from an EVM ABI or Solana IDL)
 * to this structure.
 */
export interface FunctionParameter {
  /**
   * Parameter name as defined in the contract's native interface (e.g., ABI).
   */
  name: string;

  /**
   * The parameter's type as a string, specific to the blockchain ecosystem.
   * For EVM, this would be Solidity types like 'uint256', 'address', 'tuple'.
   * Adapters interpret this string to determine appropriate UI fields and data encoding.
   */
  type: string;

  /**
   * Optional user-friendly display name, often derived from the `name` or provided
   * by the adapter or user for better UI presentation.
   */
  displayName?: string;

  /**
   * Optional description for documentation, UI tooltips, or helper text in forms.
   * This may come from comments in the contract source or be added by the user.
   */
  description?: string;

  /**
   * For complex/nested types (e.g., structs in Solidity, tuples), this array holds
   * the definition of each component parameter, recursively using `FunctionParameter`.
   * Adapters populate this based on the structure of the complex type.
   */
  components?: FunctionParameter[];
}

/**
 * Represents a function in a smart contract. This is a generalized, internal representation.
 * Adapters map functions from the contract's native interface (e.g., ABI) to this structure.
 */
export interface ContractFunction {
  /**
   * A unique identifier for the function, often generated by combining its name and input types
   * to handle function overloading. This ID is used internally by the builder app.
   */
  id: string;

  /**
   * Function name as defined in the contract's native interface.
   */
  name: string;

  /**
   * User-friendly display name for UI, typically derived from `name` or customized.
   */
  displayName: string;

  /**
   * Optional description for documentation or UI tooltips.
   */
  description?: string;

  /**
   * Input parameters for the function, each defined as a `FunctionParameter`.
   */
  inputs: FunctionParameter[];

  /**
   * Optional output parameters for the function, each defined as a `FunctionParameter`.
   * Relevant for view/pure functions or for displaying return values after a transaction.
   */
  outputs?: FunctionParameter[];

  /**
   * Represents the function's state mutability (e.g., 'view', 'pure', 'nonpayable', 'payable' for EVM).
   * While inspired by EVM, adapters for other chains should map their concepts of read-only
   * vs. state-modifying functions to this field or related fields like `modifiesState`.
   * The exact string values may be ecosystem-specific and interpreted by the adapter.
   */
  stateMutability?: string;

  /**
   * The type of the ABI item (e.g., 'function', 'constructor', 'fallback' for EVM).
   * Adapters should map the native function type to this string.
   */
  type: string;

  /**
   * Indicates if the function is expected to modify blockchain state.
   * This is often derived from `stateMutability` but provides a clear boolean flag
   * for UI logic (e.g., determining if a transaction needs to be signed).
   */
  modifiesState: boolean;
}

/**
 * Represents a contract event. This is a generalized, internal representation.
 * Adapters map events from the contract's native interface (e.g., ABI) to this structure.
 */
export interface ContractEvent {
  /**
   * A unique identifier for the event, often generated by combining its name and input types.
   */
  id: string;

  /**
   * Event name as defined in the contract's native interface.
   */
  name: string;

  /**
   * Input parameters for the event (indexed and non-indexed), each defined as a `FunctionParameter`.
   */
  inputs: FunctionParameter[];
}

/**
 * Represents the overall schema of a smart contract, including its functions and events.
 * This is a generalized, internal model used by the Contracts UI Builder.
 * Blockchain-specific adapters are responsible for parsing a contract's native interface
 * (e.g., an EVM ABI JSON, Solana IDL) and transforming it into this `ContractSchema` structure.
 * The goal is to provide a consistent data model for the builder application to work with,
 * abstracting away the specifics of different blockchain ecosystems.
 */
export interface ContractSchema {
  /**
   * Optional contract name, which might be derived from metadata or user input.
   */
  name?: string;

  /**
   * The blockchain ecosystem this contract belongs to (e.g., 'evm', 'solana').
   * This helps the builder application select the appropriate adapter and interpret types.
   */
  ecosystem: Ecosystem;

  /**
   * An array of `ContractFunction` objects representing the functions available in the contract.
   */
  functions: ContractFunction[];

  /**
   * Optional array of `ContractEvent` objects representing the events defined in the contract.
   */
  events?: ContractEvent[];

  /**
   * Optional address where the contract is deployed on its respective blockchain.
   */
  address?: string;

  /**
   * Optional chain-specific metadata that adapters can use for enhanced functionality.
   * This allows adapters to store additional context (e.g., Stellar spec entries, EVM ABI metadata)
   * without polluting the core schema interface.
   */
  metadata?: Record<string, unknown>;
}
