# Tailwind CSS Styling Standards for Contracts UI Builder

## Overview

This document outlines the Tailwind CSS styling standards and patterns used throughout the OpenZeppelin Contracts UI Builder codebase. These rules ensure consistency, maintainability, and adherence to the established design system.

## Design System Foundation

### Semantic Color Tokens

**ALWAYS use semantic design tokens instead of hard-coded colors:**

**PREFERRED:**

```tsx
// Semantic tokens that adapt to themes
className = 'bg-primary text-primary-foreground';
className = 'text-muted-foreground';
className = 'border-input bg-background';
className = 'text-destructive bg-destructive/10';
```

**AVOID:**

```tsx
// Hard-coded colors
className = 'bg-blue-500 text-white';
className = 'text-gray-600';
className = 'border-gray-300';
```

**Core Semantic Tokens:**

- **Backgrounds**: `bg-background`, `bg-card`, `bg-muted`, `bg-primary`, `bg-secondary`, `bg-destructive`
- **Text**: `text-foreground`, `text-muted-foreground`, `text-primary-foreground`, `text-destructive`
- **Borders**: `border-input`, `border-destructive`
- **Interactive**: `hover:bg-accent`, `hover:text-accent-foreground`

### CSS Variable Integration

Leverage CSS variables for consistent theming:

```tsx
className = 'ring-offset-background focus-visible:ring-ring';
```

## Layout Patterns

### Responsive Grid Systems

Use responsive grid layouts with proper breakpoints:

```tsx
// Form field grids
className = 'grid grid-cols-1 gap-4 md:grid-cols-2';

// Option selector layouts
className = 'grid-cols-3 gap-4'; // Desktop
className = 'grid-cols-[auto_1fr]'; // Collapsed mode
```

### Flexbox Patterns

Standard flex patterns for common layouts:

```tsx
// Standard flex container
className = 'flex items-center gap-2';

// Full height layouts
className = 'flex min-h-screen flex-col';

// Space between items
className = 'flex justify-between items-center';

// Centered content
className = 'flex items-center justify-center';
```

### Spacing System

Consistent spacing using Tailwind's scale:

```tsx
// Container spacing
className = 'space-y-4'; // Vertical spacing between children
className = 'space-y-6'; // Larger sections
className = 'space-y-2'; // Tight spacing

// Padding patterns
className = 'p-6'; // Standard container padding
className = 'px-3 py-2.5'; // Button/input padding
className = 'px-4 py-3'; // Card content padding
```

## Component-Specific Patterns

### Button Styling

Follow the established button variant system:

```tsx
// Use predefined variants from class-variance-authority
className={cn(buttonVariants({ variant, size, className }))}

// Common button patterns
className="flex items-center gap-2 pl-6 pr-3 py-2.5 h-11" // Action buttons
className="h-full w-5 p-0 transition-opacity" // Icon buttons
```

### Input Field Styling

Standard input field patterns:

```tsx
// Base input styling
className="border-input bg-background ring-offset-background focus-visible:ring-ring placeholder:text-muted-foreground h-10 w-full rounded-md border px-3 py-2 text-sm"

// Field container
className="flex flex-col gap-2 w-full"

// Width variants
className={`${width === 'full' ? 'w-full' : width === 'half' ? 'w-1/2' : 'w-1/3'}`}
```

### Card and Container Styling

Consistent card and container patterns:

```tsx
// Card backgrounds
className = 'bg-card';

// Section containers
className = 'rounded-md border overflow-hidden';

// Content padding
className = 'px-4 py-3 border-b last:border-0';
```

## State Management with Classes

### Interactive States

Implement consistent hover and focus states:

```tsx
// Hover effects
className = 'hover:bg-muted/50 cursor-pointer transition-colors';
className =
  "hover:before:content-[''] hover:before:absolute hover:before:inset-x-0 hover:before:top-1 hover:before:bottom-1 hover:before:bg-muted/80 hover:before:rounded-lg hover:before:-z-10";

// Focus states
className = 'focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none';
```

### Conditional State Classes

Use conditional classes for component states:

```tsx
// Selected/active states
className={cn(
  'base-classes',
  isSelected ? 'bg-primary text-primary-foreground' : 'text-muted-foreground',
  disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
)}
```

### Validation States

Consistent validation and error styling:

```tsx
// Error states
className = 'border-destructive bg-destructive/10';
className = 'text-destructive text-sm font-medium';

// Helper text
className = 'text-muted-foreground text-sm';
```

## Animation and Transitions

### Standard Transitions

Use consistent transition patterns:

```tsx
// Standard transition
className = 'transition-colors duration-300 ease-in-out';

// For layout changes
className = 'transition-all duration-300 ease-in-out';

// Opacity transitions
className = 'transition-opacity';
```

### Loading States

Standard loading and animation patterns:

```tsx
// Pulse animation
className = 'animate-pulse [animation-duration:1200ms]';

// Loading opacity
className = 'opacity-30';
```

## Responsive Design Rules

### Mobile-First Approach

Always use mobile-first responsive design:

```tsx
// Mobile hidden, desktop visible
className = 'hidden sm:block';

// Responsive grid changes
className = 'grid-cols-1 md:grid-cols-2';

// Responsive spacing
className = 'px-4 sm:px-6';
```

### Breakpoint Usage

Standard breakpoint patterns:

```tsx
// sm: 640px and up
className = 'sm:hidden mb-4'; // Mobile only

// md: 768px and up
className = 'md:col-span-2 md:grid-cols-2'; // Tablet and up
```

## Typography Patterns

### Text Sizing and Hierarchy

Consistent text sizing across components:

```tsx
// Headings
className = 'text-lg font-medium'; // Section headings
className = 'text-base font-medium'; // Subsection headings
className = 'text-sm font-medium'; // Labels and buttons

// Body text
className = 'text-sm'; // Standard body text
className = 'text-xs'; // Small text, captions

// Semantic text
className = 'text-muted-foreground text-sm'; // Helper text
className = 'text-destructive text-sm'; // Error messages
```

## Form-Specific Patterns

### Field Layout

Standard form field structure:

```tsx
// Field container
<div className="flex flex-col gap-2 w-full">

// Label with required indicator
<Label htmlFor={id}>
  {label} {isRequired && <span className="text-destructive">*</span>}
</Label>

// Helper text
<div className="text-muted-foreground text-sm">{helperText}</div>
```

### Field Grouping

Group related fields properly:

```tsx
// Field groups
className = 'grid grid-cols-1 gap-4 md:grid-cols-2';

// Section separators
className = 'border-t pt-4 md:col-span-2';
```

## Icon and Visual Element Patterns

### Icon Sizing

Consistent icon sizing:

```tsx
className = 'h-4 w-4'; // Standard icons
className = 'size-4'; // Square icons (preferred shorthand)
className = 'h-3 w-3'; // Small icons
className = 'size-10'; // Large icons/buttons
```

### Visual Feedback

Standard visual feedback patterns:

```tsx
// Badge styling
className = 'text-xs px-2 py-1 bg-muted text-muted-foreground rounded-full font-medium';

// Progress indicators
className = 'h-px flex-1 transition-all duration-300 ease-in-out';
```

## Accessibility Requirements

### Focus Management

Ensure proper focus states:

```tsx
className = 'focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none';
```

### Screen Reader Support

Include proper ARIA support:

```tsx
aria-label="Descriptive label"
aria-describedby="helper-text-id error-id"
```

## Advanced Patterns

### Complex Conditional Classes

For complex state management:

```tsx
className={cn(
  // Base classes
  'relative flex items-center justify-between h-11 px-3 py-2.5 cursor-pointer w-[225px] rounded-lg transition-all duration-300 ease-in-out',

  // Conditional states
  showLoadingAnimation && 'bg-muted animate-pulse [animation-duration:1200ms] opacity-30',

  // Selection state
  isCurrentlyLoaded
    ? 'bg-neutral-100'
    : 'hover:before:content-[""] hover:before:absolute hover:before:inset-x-0 hover:before:top-1 hover:before:bottom-1 hover:before:bg-muted/80 hover:before:rounded-lg hover:before:-z-10'
)}
```

### CSS Grid with Complex Layouts

Advanced grid patterns:

```tsx
// Dynamic column spanning
className={`col-span-${isCollapsed ? 1 : columns - 1}`}

// Grid with auto-fit
className="grid grid-cols-[auto_1fr] gap-4"
```

## Utility Usage

### Class Name Utilities

Always use the `cn` utility for combining classes:

```tsx
import { cn } from '@openzeppelin/contracts-ui-builder-utils';

className={cn(
  'base-classes',
  conditionalClass && 'conditional-classes',
  variant === 'primary' && 'primary-classes'
)}
```

### Width and Sizing

Standard sizing patterns:

```tsx
// Width patterns
className = 'w-full'; // Full width
className = 'w-80'; // Fixed width (320px)
className = 'w-[225px]'; // Custom width
className = 'max-w-2xl'; // Constrained max width

// Height patterns
className = 'h-10'; // Standard input height
className = 'h-11'; // Button height
className = 'min-h-screen'; // Full viewport height
```

## Performance Considerations

### Class Optimization

- Avoid unnecessary class combinations
- Use Tailwind's built-in optimization features
- Prefer semantic tokens over custom values when possible

### Responsive Optimization

- Use mobile-first approach to minimize CSS
- Only add responsive classes when necessary
- Combine responsive classes efficiently

## Common Anti-Patterns to Avoid

### DON'T

```tsx
// Hard-coded colors
className="bg-blue-500 text-white"

// Inline styles with Tailwind
style={{ backgroundColor: '#3B82F6' }}

// Overly complex class strings without cn utility
className={`base-class ${condition ? 'conditional-class' : ''} ${otherCondition ? 'other-class' : ''}`}

// Non-semantic spacing
className="mt-4 mb-6 ml-2 mr-3"
```

### DO

```tsx
// Semantic colors
className="bg-primary text-primary-foreground"

// Use Tailwind classes
className="bg-primary"

// Use cn utility
className={cn('base-class', condition && 'conditional-class', otherCondition && 'other-class')}

// Semantic spacing
className="space-y-4 px-4"
```

## Theme Integration

### CSS Variables

The design system uses CSS variables for theming. Always prefer semantic tokens that map to these variables rather than hard-coded values.

### Dark Mode Support

All semantic tokens automatically support dark mode through CSS variables. Avoid manual dark mode classes unless absolutely necessary.

## Code Quality

### JSDoc Comments

Include JSDoc comments for complex styling logic:

```tsx
/**
 * Dynamic grid layout that adapts based on collapsed state
 * - Collapsed: auto-width + remaining space
 * - Expanded: equal columns based on `columns` prop
 */
className={`${gridClass} ${isCollapsed ? 'grid-cols-[auto_1fr]' : `grid-cols-${columns}`}`}
```

### Component Organization

- Keep styling logic close to the component definition
- Extract complex class combinations into variables when reused
- Use TypeScript for style variants when applicable

---

These standards ensure consistency across the entire Contracts UI Builder ecosystem while maintaining flexibility for component-specific needs. Always prioritize semantic tokens and established patterns over custom solutions.
