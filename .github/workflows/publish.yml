# PRIVATE REGISTRY RELEASE WORKFLOW
# ==================================
# This workflow handles both CI and publishing for the private registry.
# All @openzeppelin packages (including dependencies) are resolved from the private registry
# due to organization-level scoping in .npmrc.
#
# TRANSITION TO PUBLIC RELEASE:
# When ready to publish publicly, update this workflow to:
# 1. Update the .npmrc authentication to use NPM_TOKEN for npm registry
# 2. Update the Changesets publish command to target npm registry
# 3. Ensure .npmrc is updated (see .npmrc comments)
# 4. All package names and imports will remain the same

name: Release

on:
  push:
    branches:
      - main
      - PLAT-6889-public-security

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  packages: write # âœ… Includes both read and write permissions
  pull-requests: write
  issues: write
  id-token: write
  attestations: write
  actions: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Use node@20
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: 20.11.1
          cache: 'pnpm'
          registry-url: "https://npm.pkg.github.com"
          scope: "@openzeppelin"
          always-auth: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  provenance:
    uses: slsa-framework/slsa-github-generator/.github/workflows/builder_nodejs_slsa3.yml@f7dd8c54c2067bafc12ca7a55595d5ee9b75204a  # v2.1.0
    with:
      run-scripts: "install-pnpm, install-deps, build, test"
      node-version: "20.11.1"
      rekor-log-public: true

  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # This is needed for changesets to calculate version based on commit history
          persist-credentials: false

      # - name: Configure npm authentication for private registry
      #   run: |
      #     echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Verify dependencies
        run: pnpm audit
        continue-on-error: true

      # - name: Create .npmrc for publishing
      #   run: |
      #     cat << EOF > "$HOME/.npmrc"
      #     @openzeppelin:registry=https://npm.pkg.github.com
      #     //npm.pkg.github.com/:_authToken=${NPM_TOKEN}
      #     EOF
      #   env:
      #     NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create temp dir
        id: temp-dir
        run: |
          set -euo pipefail

          temp_dir=$(mktemp -d)
          echo "path=${temp_dir}" >>"${GITHUB_OUTPUT}"

      - name: Download tarball
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-download-artifact@3bcecb4ade4f265cff30488059a9dca39e26b360 # main
        with:
          name: ${{ needs.provenance.outputs.package-download-name }}
          path: "${{ steps.temp-dir.outputs.path }}/${{ needs.provenance.outputs.package-name }}"
          sha256: ${{ needs.provenance.outputs.package-download-sha256 }}

      - name: Download provenance
        uses: slsa-framework/slsa-github-generator/actions/nodejs/secure-attestations-download@3bcecb4ade4f265cff30488059a9dca39e26b360 # v1.6.0
        with:
          name: ${{ needs.provenance.outputs.provenance-download-name }}
          path: "${{ steps.temp-dir.outputs.path }}"
          sha256: ${{ needs.provenance.outputs.provenance-download-sha256 }}

      - name: Unpack the zipped artifact
        run: |
          set -euo pipefail
          cd "${{ steps.temp-dir.outputs.path }}"
          tar -xzvf "${{ needs.provenance.outputs.package-name }}" -C $GITHUB_WORKSPACE --strip-components=1
          cd "$GITHUB_WORKSPACE"
          pnpm run install-deps
          pnpm test


      # CURRENT: Publishing to GitHub private registry using Changesets
      # FUTURE: When going public, this will automatically switch to npm registry
      - name: Create Release Pull Request or Publish to GitHub
        id: changesets
        uses: changesets/action@3de3850952bec538fde60aac71731376e57b9b57 # v1.4.8
        with:
          publish: pnpm changeset publish --no-git-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUSKY: 0 # Disable husky hooks for automated changeset commits
          NPM_CONFIG_PROVENANCE: true

      - name: Extract version from package.json
        id: extract_version
        run: |
          version=$(jq -r '.version' package.json)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate SBOM
        uses: anchore/sbom-action@d94f46e13c6c62f59525ac9a1e147a99dc0b9bf5
        with:
          artifact-name: sbom-${{ github.event.repository.name }}-${{ steps.extract_version.outputs.version }}.spdx.json
          output-file: /${{ steps.temp-dir.outputs.path }}/sbom-${{ github.event.repository.name }}-${{ steps.extract_version.outputs.version }}.spdx.json
          upload-artifact: false
          upload-release-assets: false

      - name: Download Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16

      - name: Upload attestations SLSA
        uses: actions/attest-build-provenance@5e9cb68e95676991667494a6a4e59b8a2f13e1d0
        with:
          subject-path: ${{ needs.provenance.outputs.provenance-download-name }}
          subject-name: ${{ github.event.repository.name }}-${{ steps.extract_version.outputs.version }}

      - name: Upload attestations SBOM
        uses: actions/attest-build-provenance@5e9cb68e95676991667494a6a4e59b8a2f13e1d0
        with:
          subject-path: /${{ steps.temp-dir.outputs.path }}/sbom-${{ github.event.repository.name }}-${{ steps.extract_version.outputs.version }}.spdx.json
